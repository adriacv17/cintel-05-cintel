[{"name": "app.py", "content": "from shiny import reactive, render\nfrom shiny.express import ui\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom ipyleaflet import Map\nfrom shinywidgets import render_plotly, render_widget\nfrom shinyswatch import theme\nfrom scipy import stats\nfrom faicons import icon_svg # https://fontawesome.com/v4/cheatsheet/\n\n# First, set a constant UPDATE INTERVAL for all live data\n\nUPDATE_INTERVAL_SECS: int = 1\n\n# Initialize a REACTIVE VALUE with a common data structure\n# This reactive value is a wrapper around a DEQUE of readings\n\nDEQUE_SIZE: int = 10\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n# Initialize a REACTIVE CALC that all display components can call\n# to get the latest data and display it.\n\n@reactive.calc()\ndef reactive_calc_combined():\n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # Data generation logic\n    temp = round(random.uniform(20, 21), 1)\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    new_deque_info = {\"temp\":temp, \"timestamp\":timestamp}\n\n    # get the deque and append the new entry\n    reactive_value_wrapper.get().append(new_deque_info)\n\n    # Get a snapshot of the current deque for any further processing\n    deque_snapshot = reactive_value_wrapper.get()\n\n    # For Display: Convert deque to DataFrame for display\n    deque_df = pd.DataFrame(deque_snapshot)\n\n    # For Display: Get the latest dictionary entry\n    latest_deque_entry = new_deque_info\n\n    # Return a tuple with everything we need\n    # Every time we call this function, we'll get all these values\n    return deque_snapshot, deque_df, latest_deque_entry\n\n# Define the Shiny UI Page layout\n# Call the ui.page_opts() function\nui.page_opts(title=\"PyShiny Express: Live Random Data\", fillable=True)\ntheme.superhero()\n\nwith ui.sidebar(open=\"open\"):\n\n    ui.h2(\"Oklahoma City Explorer\", class_=\"text-center\")\n    ui.p(\n        \"A demonstration of real-time temperature readings in Oklahoma City.\",\n        class_=\"text-center\",\n    )\n    \n    @render_widget(width=\"200%\", height=\"200px\")\n    def my_map():\n        return Map(center=(35.36, -97.38), zoom=10)\n        \n    ui.hr()\n    ui.h6(\"Links:\")\n    ui.a(\n        \"GitHub Source\",\n        href=\"https://github.com/adriacv17/cintel-05-cintel\",\n        target=\"_blank\",\n    )\n    ui.a(\n        \"GitHub App\",\n        href=\"https://denisecase.github.io/cintel-05-cintel/\",\n        target=\"_blank\",\n    )\n    ui.a(\"PyShiny\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n    ui.a(\n        \"PyShiny Express\",\n        href=\"hhttps://shiny.posit.co/blog/posts/shiny-express/\",\n        target=\"_blank\",\n    )\n    \n\n# In Shiny Express, everything not in the sidebar is in the main panel\n\nwith ui.layout_columns():\n    with ui.value_box(\n        showcase=icon_svg(\"fire\"),\n        theme=\"bg-gradient-red-yellow\",\n    ):\n\n        \"Current Temperature\"\n\n        @render.text\n        def display_temp():\n            \"\"\"Get the latest reading and return a temperature string\"\"\"\n            deque_snapshot, deque_df, latest_deque_entry = reactive_calc_combined()\n            return f\"{latest_deque_entry['temp']} C\"\n\n        \"warm as normal\"\n\n  \n\n    with ui.value_box(\n        showcase=icon_svg(\"clock\"),\n        theme=\"bg-gradient-orange-yellow\",\n    ):\n        \"Current Date and Time\"\n        @render.text\n        def display_time():\n            \"\"\"Get the latest reading and return a timestamp string\"\"\"\n            deque_snapshot, deque_df, latest_deque_entry = reactive_calc_combined()\n            return f\"{latest_deque_entry['timestamp']}\"\n\n\nwith ui.layout_columns():\n    with ui.card(full_screen=True,width=\"200%\", height=\"300px\"):\n        ui.card_header(\"Most Recent Readings\")\n\n        @render.data_frame\n        def display_deque_df():\n            \"\"\"Get the latest reading and return a dataframe with current readings\"\"\"\n            deque_snapshot, deque_df, latest_deque_entry = reactive_calc_combined()\n            pd.set_option('display.width', None)        # Use maximum width\n            return render.DataGrid( deque_df,width=\"100%\")\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Chart with Current Trend\")\n\n        @render_plotly\n        def display_plot():\n            # Fetch from the reactive calc function\n            deque_snapshot, deque_df, latest_deque_entry = reactive_calc_combined()\n\n            # Ensure the DataFrame is not empty before plotting\n            if not deque_df.empty:\n                # Convert the 'timestamp' column to datetime for better plotting\n                deque_df[\"timestamp\"] = pd.to_datetime(deque_df[\"timestamp\"])\n\n                # Create scatter plot for readings\n                # pass in the deque_df, the name of the x column, the name of the y column,\n                # and more\n        \n                fig = px.scatter(deque_df,\n                x=\"timestamp\",\n                y=\"temp\",\n                title=\"Temperature Readings with Regression Line\",\n                labels={\"temp\": \"Temperature (\u00c2\u00b0C)\", \"timestamp\": \"Time\"},\n                color=\"temp\",\n                color_continuous_scale=px.colors.sequential.Peach)\n                fig.update_layout(coloraxis_colorbar=dict(yanchor=\"top\", y=0.9, x=1, ticks=\"outside\"))\n                fig.update_layout(paper_bgcolor=\"yellow\")\n                # Linear regression - we need to get a list of the\n                # Independent variable x values (time) and the\n                # Dependent variable y values (temp)\n                # then, it's pretty easy using scipy.stats.linregress()\n\n                # For x let's generate a sequence of integers from 0 to len(deque_df)\n                sequence = range(len(deque_df))\n                x_vals = list(sequence)\n                y_vals = deque_df[\"temp\"]\n\n                slope, intercept, r_value, p_value, std_err = stats.linregress(x_vals, y_vals)\n                deque_df['best_fit_line'] = [slope * x + intercept for x in x_vals]\n\n                # Add the regression line to the figure\n                fig.add_scatter(x=deque_df[\"timestamp\"], y=deque_df['best_fit_line'], mode='lines', name='Regression Line')\n \n                # Update layout as needed to customize further\n                fig.update_layout(xaxis_title=\"Time\",yaxis_title=\"Temperature (\u00c2\u00b0C)\")\n            return fig", "type": "text"}]